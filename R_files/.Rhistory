#install.packages("ResourceSelection")
library(ResourceSelection)
library(MASS)
#install.packages("logistf")
library(logistf)
df = data.frame(read.csv("train.csv"))
df = subset(df, select = -c(y_percent_return_over_investment))
head(df)
smp_size = floor(0.95*nrow(df))
smp_size
set.seed(123)
train_ind = sample(seq_len(nrow(df)),size = smp_size)
train = df[train_ind,]
sample_train = df[-train_ind,]
nrow(sample_train)
sample(colnames(sample_train$data[[1]]), 1)
nrow(sample_train)
smp_size = floor(0.99*nrow(df))
smp_size
set.seed(123)
train_ind = sample(seq_len(nrow(df)),size = smp_size)
train = df[train_ind,]
sample_train = df[-train_ind,]
nrow(sample_train)
mylogit <- glm(loan_status_Fully.Paid ~ ., data = sample_train, family = "binomial")
mylogit.step <- stepAIC(mylogit, trace = TRUE)
nrow(sample_train)
mylogit <- glm(loan_status_Fully.Paid ~ ., data = sample_train, family = "binomial")
mylogit.step <- stepAIC(mylogit, trace = TRUE, direction = c("forward"))
mylogit.step <- stepAIC(mylogit, trace = TRUE, direction = c("forward"))
mylogit.step <- stepAIC(mylogit, trace = TRUE, direction = "forward")
library(ResourceSelection)
library(MASS)
library(logistf)
df = data.frame(read.csv("train.csv"))
df = subset(df, select = -c(y_percent_return_over_investment))
head(df)
smp_size = floor(0.99*nrow(df))
smp_size
set.seed(123)
train_ind = sample(seq_len(nrow(df)),size = smp_size)
train = df[train_ind,]
sample_train = df[-train_ind,]
nrow(sample_train)
mylogit <- glm(loan_status_Fully.Paid ~ ., data = sample_train, family = "binomial")
library(ResourceSelection)
library(MASS)
library(logistf)
df = data.frame(read.csv("train.csv"))
df = subset(df, select = -c(y_percent_return_over_investment))
head(df)
smp_size = floor(0.95*nrow(df))
smp_size
set.seed(123)
train_ind = sample(seq_len(nrow(df)),size = smp_size)
train = df[train_ind,]
sample_train = df[-train_ind,]
nrow(sample_train)
mylogit <- glm(loan_status_Fully.Paid ~ ., data = sample_train, family = "binomial")
mylogit <- glm(loan_status_Fully_Paid ~ ., data = sample_train, family = "binomial")
mylogit.step <- stepAIC(mylogit, trace = TRUE, direction = "forward")
summary(mylogit.step)
View(mylogit.step)
View(mylogit.step)
library(ResourceSelection)
library(MASS)
library(logistf)
library(broom)
df = data.frame(read.csv("train.csv"))
df = subset(df, select = -c(y_percent_return_over_investment))
head(df)
summary(mylogit.step)
glance(mylogit.step)$p.value
#summary(mylogit.step)
glance(mylogit.step)$p.value
#summary(mylogit.step)
annova(mylogit.step)
#summary(mylogit.step)
anova(mylogit.step)
library(ResourceSelection)
library(MASS)
library(logistf)
df = data.frame(read.csv("train.csv"))
df = subset(df, select = -c(y_percent_return_over_investment))
head(df)
smp_size = floor(0.95 * nrow(df))
smp_size
set.seed(123)
train_ind = sample(seq_len(nrow(df)),size = smp_size)
train = df[train_ind,]
sample_train = df[-train_ind,]
smp_size = floor(0.98 * nrow(df))
smp_size
set.seed(123)
train_ind = sample(seq_len(nrow(df)),size = smp_size)
train = df[train_ind,]
sample_train = df[-train_ind,]
nrow(sample_train)
mylogit <- glm(loan_status_Fully_Paid ~ ., data = sample_train, family = "binomial")
mylogit.step <- stepAIC(mylogit, trace = TRUE, direction = "forward")
summary(mylogit.step)
summary(mylogit.step)$coefficients
summary(mylogit.step)
summary(mylogit.step)
smp_size = floor(0.95 * nrow(df))
smp_size
set.seed(123)
train_ind = sample(seq_len(nrow(df)),size = smp_size)
train = df[train_ind,]
sample_train = df[-train_ind,]
nrow(sample_train)
mylogit <- glm(loan_status_Fully_Paid ~ ., data = sample_train, family = "binomial")
mylogit.step <- stepAIC(mylogit, trace = TRUE, direction = "forward")
summary(mylogit.step)
summary(mylogit.step)$coefficients
mylogit.step <- stepAIC(mylogit, direction = "forward")
summary(mylogit.step)$coefficients
write.csv(summary(mylogit.step)$coefficients, "coef_log.csv")
summary(mylogit.step)$coefficients['Pr(>|z|)']
summary(mylogit.step)$coefficients('Pr(>|z|)')
summary(mylogit.step)$coefficients['Pr(>|z|)']
summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
smp_size = floor(0.70 * nrow(df))
smp_size
set.seed(123)
train_ind = sample(seq_len(nrow(df)),size = smp_size)
train = df[train_ind,]
sample_train = df[-train_ind,]
mylogit <- glm(loan_status_Fully_Paid ~ ., data = sample_train, family = "binomial")
mylogit.step = stepAIC(mylogit, direction = "forward")
summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
features_keep
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
#my_data = filter(features_keep$ > 7)
View(features_keep)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
my_data = filter(features_keep > 7)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
my_data = filter(features_keep < 7)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
my_data = filter(features_keep[1] < 7)
library(ResourceSelection)
library(MASS)
library(logistf)
library(dplyr)
df = data.frame(read.csv("train.csv"))
df = subset(df, select = -c(y_percent_return_over_investment))
head(df)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
my_data = filter(features_keep < 7)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
my_data = filter(features_keep[1] < 7)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
my_data = filter(features_keep[0] < 7)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
my_data %>% filter(features_keep < 7)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
features_keep %>% filter(Pr(>|z|) < 7)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
features_keep %>% filter('Pr(>|z|)' < 7)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
colnames(features_keep)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
names(features_keep)[names(features_keep) == "Pr(>|z|)"] = "z_value"
colnames(features_keep)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
names(features_keep)[1] = "z_value"
colnames(features_keep)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
names(features_keep)[0] = "z_value"
colnames(features_keep)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
names(features_keep)[4] = "z_value"
colnames(features_keep)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
names(features_keep)[3] = "z_value"
colnames(features_keep)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
names(features_keep)[2] = "z_value"
colnames(features_keep)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
names(features_keep)[1] = "z_value"
colnames(features_keep)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
names(features_keep)[0] = "z_value"
colnames(features_keep)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
names(features_keep)[5] = "z_value"
colnames(features_keep)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=TRUE]
names(features_keep)[1] = "z_value"
colnames(features_keep)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=TRUE]
names(features_keep)[0] = "z_value"
colnames(features_keep)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
names(features_keep)[0] = "z_value"
colnames(features_keep)
View(features_keep)
View(features_keep)
View(features_keep)
# select if p value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
zfeatures
# select if z value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
bar <- subset(zfeatures, `Pr(>|z|)` < .05)
bar
# select if z value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
zfeatures = subset(zfeatures, `Pr(>|z|)` < .05)
zfeatures
zfeatures[0]
df = subset(sample_train, select = c(zfeatures[0]))
df = subset(sample_train, select = c(as.list(zfeatures[0]))
head(df)
as.list(zfeatures[0])
df = subset(sample_train, select = c(as.list(zfeatures[0]))
head(df)
as.list(zfeatures[0])
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
print(as.list(zfeatures[0]))
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
as.list(zfeatures[0])
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
zfeatures[0]
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(zfeatures)
zfeatures = zfeatures[0]
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(zfeatures)
View(zfeatures)
View(zfeatures)
View(zfeatures)
View(zfeatures)
# select if z value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
zfeatures = subset(zfeatures, `Pr(>|z|)` < .05)
zfeatures
zfeatures = list(zfeatures[0])
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(zfeatures)
View(zfeatures)
zfeatures = list(zfeatures[,0])
zfeatures = list(zfeatures[0,])
zfeatures = list(zfeatures[1])
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(zfeatures)
View(zfeatures)
# select if z value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
zfeatures = subset(zfeatures, `Pr(>|z|)` < .05)
zfeatures
zfeatures = list(zfeatures[1])
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(zfeatures)
View(zfeatures)
# select if z value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
zfeatures = subset(zfeatures, `Pr(>|z|)` < .05)
zfeatures
zfeatures = list(zfeatures[0])
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(zfeatures)
View(zfeatures)
View(zfeatures)
# select if z value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
zfeatures = subset(zfeatures, `Pr(>|z|)` < .05)
zfeatures
zfeatures = zfeatures[0]
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(zfeatures)
View(zfeatures)
# select if z value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
zfeatures = subset(zfeatures, `Pr(>|z|)` < .05)
zfeatures
zfeatures = zfeatures[0]
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
zfeatures = zfeatures[0]
zfeatures
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
zfeatures = zfeatures[0]
features.l = zfeatures
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
zfeatures = zfeatures[0]
features.l = zfeatures
features.l
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(features.l)
View(features.l)
zfeatures['features'] = zfeatures[0]
zfeatures
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
zfeatures['features'] = zfeatures[1]
# select if z value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
zfeatures = subset(zfeatures, `Pr(>|z|)` < .05)
zfeatures
zfeatures['features'] = zfeatures[0]
zfeatures
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(features_keep)
View(features_keep)
zfeatures['features'] = rownames(zfeatures)
zfeatures
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
#zfeatures['features'] = rownames(zfeatures)
df = subset(sample_train, select = c(as.list(rownames(zfeatures)))
head(df)
#zfeatures['features'] = rownames(zfeatures)
df = subset(sample_train, select = c(rownames(zfeatures)))
head(df)
#zfeatures['features'] = rownames(zfeatures)
df = subset(sample_train, select = c(rownames(zfeatures)))
df
df = subset(train, select = c(rownames(zfeatures)))
head(df)
df = subset(train, select = c(rownames(zfeatures)))
head(df)
nrow(df)
train_31 = subset(train, select = c(rownames(zfeatures)))
mylogit <- glm(loan_status_Fully_Paid ~ ., data = train_31, family = "binomial")
train_31 = subset(train, select = c(rownames(zfeatures), 'loan_status_Fully_Paid'))
mylogit <- glm(loan_status_Fully_Paid ~ ., data = train_31, family = "binomial")
summary(mylogit)
hoslem.test(train_31$loan_status_Fully_Paid, fitted(mylogit), g=10)
#hoslem.test(test$has_second_trip, predict.glm(mylogit.step, test), g=10)
#write.csv(predict.glm(mylogit.step, test),"1.csv")
#write.csv(test$has_second_trip,"2.csv")
combine.df = train_31$loan_status_Fully_Paid
combine.df['fit'] = fitted(mylogit)
write.csv(combine.df, "fit_info.csv")
hoslem.test(train_31$loan_status_Fully_Paid, fitted(mylogit), g=10)
#hoslem.test(test$has_second_trip, predict.glm(mylogit.step, test), g=10)
#write.csv(predict.glm(mylogit.step, test),"1.csv")
#write.csv(test$has_second_trip,"2.csv")
combine.df = train_31$loan_status_Fully_Paid
combine.df['fit'] = fitted(mylogit)
write.csv(combine.df, "fit_info.csv")
combine.df
hoslem.test(train_31$loan_status_Fully_Paid, fitted(mylogit), g=10)
#hoslem.test(test$has_second_trip, predict.glm(mylogit.step, test), g=10)
#write.csv(predict.glm(mylogit.step, test),"1.csv")
#write.csv(test$has_second_trip,"2.csv")
combine.df = train_31$loan_status_Fully_Paid
combine.df
#combine.df['fit'] = fitted(mylogit)
write.csv(combine.df, "fit_info.csv")
#combine.df
hoslem.test(train_31$loan_status_Fully_Paid, fitted(mylogit), g=10)
#hoslem.test(test$has_second_trip, predict.glm(mylogit.step, test), g=10)
#write.csv(predict.glm(mylogit.step, test),"1.csv")
#write.csv(test$has_second_trip,"2.csv")
#combine.df = train_31$loan_status_Fully_Paid
#combine.df
#combine.df['fit'] = fitted(mylogit)
write.csv(train_31$loan_status_Fully_Paid, "fit_info1.csv")
write.csv(fitted(mylogit), "fit_info1.csv")
#combine.df
hoslem.test(train_31$loan_status_Fully_Paid, fitted(mylogit), g=10)
#hoslem.test(test$has_second_trip, predict.glm(mylogit.step, test), g=10)
#write.csv(predict.glm(mylogit.step, test),"1.csv")
#write.csv(test$has_second_trip,"2.csv")
#combine.df = train_31$loan_status_Fully_Paid
#combine.df
#combine.df['fit'] = fitted(mylogit)
write.csv(train_31$loan_status_Fully_Paid, "fit_info1.csv")
write.csv(fitted(mylogit), "fit_info2.csv")
#combine.df
hoslem.test(train_31$loan_status_Fully_Paid, fitted(mylogit), g=10)
#hoslem.test(test$has_second_trip, predict.glm(mylogit.step, test), g=10)
#write.csv(predict.glm(mylogit.step, test),"1.csv")
#write.csv(test$has_second_trip,"2.csv")
cor(train_31$loan_status_Fully_Paid, fitted(mylogit))
#combine.df
cor(train_31$loan_status_Fully_Paid, fitted(mylogit))^2
#combine.df
predict.glm(sample_train, mylogit)
help(predict.glm)
#predict.glm(sample_train, mylogit)
help(predict.glm)
predict.glm(mylogit, sample_train, type = "response")
predict_var = predict.glm(mylogit, sample_train, type = "response")
predict_validation = predict.glm(mylogit, sample_train, type = "response")
cor(sample_train$loan_status_Fully_Paid, predict_validation)^2
df = data.frame(read.csv("test.csv"))
df = subset(df, select = -c(y_percent_return_over_investment))
predict_test = predict.glm(mylogit, df, type = "response")
cor(df$loan_status_Fully_Paid, predict_test)^2
write.csv(summary(mylogit)$coefficients, "logit_coefs.csv")
write.csv(df, "test_with_predicted.csv")
df = data.frame(read.csv("test.csv"))
test_31 = subset(df, select = c(rownames(zfeatures), 'loan_status_Fully_Paid'))
df['predicted_values'] =  predict.glm(mylogit, test_31, type = "response")
df
write.csv(summary(mylogit)$coefficients, "logit_coefs.csv")
write.csv(df, "test_with_predicted.csv")
df = data.frame(read.csv("test.csv"))
test_31 = subset(df, select = c(rownames(zfeatures), 'loan_status_Fully_Paid'))
test_31['predicted_values'] =  predict.glm(mylogit, test_31, type = "response")
head(test_31)
write.csv(summary(mylogit)$coefficients, "logit_coefs.csv")
write.csv(test_31, "test_with_predicted.csv")
df = data.frame(read.csv("test.csv"))
test_31 = subset(df, select = c(rownames(zfeatures), 'y_percent_return_over_investment', 'loan_status_Fully_Paid'))
test_31['predicted_values'] =  predict.glm(mylogit, test_31, type = "response")
head(test_31)
write.csv(summary(mylogit)$coefficients, "logit_coefs.csv")
write.csv(test_31, "test_with_predicted.csv")
