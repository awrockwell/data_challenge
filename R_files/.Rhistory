zfeatures = as.data.frame(features_keep)
bar <- subset(zfeatures, `Pr(>|z|)` < .05)
bar
# select if z value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
zfeatures = subset(zfeatures, `Pr(>|z|)` < .05)
zfeatures
zfeatures[0]
df = subset(sample_train, select = c(zfeatures[0]))
df = subset(sample_train, select = c(as.list(zfeatures[0]))
head(df)
as.list(zfeatures[0])
df = subset(sample_train, select = c(as.list(zfeatures[0]))
head(df)
as.list(zfeatures[0])
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
print(as.list(zfeatures[0]))
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
as.list(zfeatures[0])
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
zfeatures[0]
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(zfeatures)
zfeatures = zfeatures[0]
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(zfeatures)
View(zfeatures)
View(zfeatures)
View(zfeatures)
View(zfeatures)
# select if z value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
zfeatures = subset(zfeatures, `Pr(>|z|)` < .05)
zfeatures
zfeatures = list(zfeatures[0])
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(zfeatures)
View(zfeatures)
zfeatures = list(zfeatures[,0])
zfeatures = list(zfeatures[0,])
zfeatures = list(zfeatures[1])
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(zfeatures)
View(zfeatures)
# select if z value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
zfeatures = subset(zfeatures, `Pr(>|z|)` < .05)
zfeatures
zfeatures = list(zfeatures[1])
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(zfeatures)
View(zfeatures)
# select if z value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
zfeatures = subset(zfeatures, `Pr(>|z|)` < .05)
zfeatures
zfeatures = list(zfeatures[0])
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(zfeatures)
View(zfeatures)
View(zfeatures)
# select if z value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
zfeatures = subset(zfeatures, `Pr(>|z|)` < .05)
zfeatures
zfeatures = zfeatures[0]
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(zfeatures)
View(zfeatures)
# select if z value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
zfeatures = subset(zfeatures, `Pr(>|z|)` < .05)
zfeatures
zfeatures = zfeatures[0]
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
zfeatures = zfeatures[0]
zfeatures
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
zfeatures = zfeatures[0]
features.l = zfeatures
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
zfeatures = zfeatures[0]
features.l = zfeatures
features.l
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(features.l)
View(features.l)
zfeatures['features'] = zfeatures[0]
zfeatures
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
zfeatures['features'] = zfeatures[1]
# select if z value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
zfeatures = subset(zfeatures, `Pr(>|z|)` < .05)
zfeatures
zfeatures['features'] = zfeatures[0]
zfeatures
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
View(features_keep)
View(features_keep)
zfeatures['features'] = rownames(zfeatures)
zfeatures
#df = subset(sample_train, select = c(as.list(zfeatures[0]))
#head(df)
#zfeatures['features'] = rownames(zfeatures)
df = subset(sample_train, select = c(as.list(rownames(zfeatures)))
head(df)
#zfeatures['features'] = rownames(zfeatures)
df = subset(sample_train, select = c(rownames(zfeatures)))
head(df)
#zfeatures['features'] = rownames(zfeatures)
df = subset(sample_train, select = c(rownames(zfeatures)))
df
df = subset(train, select = c(rownames(zfeatures)))
head(df)
df = subset(train, select = c(rownames(zfeatures)))
head(df)
nrow(df)
train_31 = subset(train, select = c(rownames(zfeatures)))
mylogit <- glm(loan_status_Fully_Paid ~ ., data = train_31, family = "binomial")
train_31 = subset(train, select = c(rownames(zfeatures), 'loan_status_Fully_Paid'))
mylogit <- glm(loan_status_Fully_Paid ~ ., data = train_31, family = "binomial")
summary(mylogit)
hoslem.test(train_31$loan_status_Fully_Paid, fitted(mylogit), g=10)
#hoslem.test(test$has_second_trip, predict.glm(mylogit.step, test), g=10)
#write.csv(predict.glm(mylogit.step, test),"1.csv")
#write.csv(test$has_second_trip,"2.csv")
combine.df = train_31$loan_status_Fully_Paid
combine.df['fit'] = fitted(mylogit)
write.csv(combine.df, "fit_info.csv")
hoslem.test(train_31$loan_status_Fully_Paid, fitted(mylogit), g=10)
#hoslem.test(test$has_second_trip, predict.glm(mylogit.step, test), g=10)
#write.csv(predict.glm(mylogit.step, test),"1.csv")
#write.csv(test$has_second_trip,"2.csv")
combine.df = train_31$loan_status_Fully_Paid
combine.df['fit'] = fitted(mylogit)
write.csv(combine.df, "fit_info.csv")
combine.df
hoslem.test(train_31$loan_status_Fully_Paid, fitted(mylogit), g=10)
#hoslem.test(test$has_second_trip, predict.glm(mylogit.step, test), g=10)
#write.csv(predict.glm(mylogit.step, test),"1.csv")
#write.csv(test$has_second_trip,"2.csv")
combine.df = train_31$loan_status_Fully_Paid
combine.df
#combine.df['fit'] = fitted(mylogit)
write.csv(combine.df, "fit_info.csv")
#combine.df
hoslem.test(train_31$loan_status_Fully_Paid, fitted(mylogit), g=10)
#hoslem.test(test$has_second_trip, predict.glm(mylogit.step, test), g=10)
#write.csv(predict.glm(mylogit.step, test),"1.csv")
#write.csv(test$has_second_trip,"2.csv")
#combine.df = train_31$loan_status_Fully_Paid
#combine.df
#combine.df['fit'] = fitted(mylogit)
write.csv(train_31$loan_status_Fully_Paid, "fit_info1.csv")
write.csv(fitted(mylogit), "fit_info1.csv")
#combine.df
hoslem.test(train_31$loan_status_Fully_Paid, fitted(mylogit), g=10)
#hoslem.test(test$has_second_trip, predict.glm(mylogit.step, test), g=10)
#write.csv(predict.glm(mylogit.step, test),"1.csv")
#write.csv(test$has_second_trip,"2.csv")
#combine.df = train_31$loan_status_Fully_Paid
#combine.df
#combine.df['fit'] = fitted(mylogit)
write.csv(train_31$loan_status_Fully_Paid, "fit_info1.csv")
write.csv(fitted(mylogit), "fit_info2.csv")
#combine.df
hoslem.test(train_31$loan_status_Fully_Paid, fitted(mylogit), g=10)
#hoslem.test(test$has_second_trip, predict.glm(mylogit.step, test), g=10)
#write.csv(predict.glm(mylogit.step, test),"1.csv")
#write.csv(test$has_second_trip,"2.csv")
cor(train_31$loan_status_Fully_Paid, fitted(mylogit))
#combine.df
cor(train_31$loan_status_Fully_Paid, fitted(mylogit))^2
#combine.df
predict.glm(sample_train, mylogit)
help(predict.glm)
#predict.glm(sample_train, mylogit)
help(predict.glm)
predict.glm(mylogit, sample_train, type = "response")
predict_var = predict.glm(mylogit, sample_train, type = "response")
predict_validation = predict.glm(mylogit, sample_train, type = "response")
cor(sample_train$loan_status_Fully_Paid, predict_validation)^2
df = data.frame(read.csv("test.csv"))
df = subset(df, select = -c(y_percent_return_over_investment))
predict_test = predict.glm(mylogit, df, type = "response")
cor(df$loan_status_Fully_Paid, predict_test)^2
write.csv(summary(mylogit)$coefficients, "logit_coefs.csv")
write.csv(df, "test_with_predicted.csv")
df = data.frame(read.csv("test.csv"))
test_31 = subset(df, select = c(rownames(zfeatures), 'loan_status_Fully_Paid'))
df['predicted_values'] =  predict.glm(mylogit, test_31, type = "response")
df
write.csv(summary(mylogit)$coefficients, "logit_coefs.csv")
write.csv(df, "test_with_predicted.csv")
df = data.frame(read.csv("test.csv"))
test_31 = subset(df, select = c(rownames(zfeatures), 'loan_status_Fully_Paid'))
test_31['predicted_values'] =  predict.glm(mylogit, test_31, type = "response")
head(test_31)
write.csv(summary(mylogit)$coefficients, "logit_coefs.csv")
write.csv(test_31, "test_with_predicted.csv")
df = data.frame(read.csv("test.csv"))
test_31 = subset(df, select = c(rownames(zfeatures), 'y_percent_return_over_investment', 'loan_status_Fully_Paid'))
test_31['predicted_values'] =  predict.glm(mylogit, test_31, type = "response")
head(test_31)
write.csv(summary(mylogit)$coefficients, "logit_coefs.csv")
write.csv(test_31, "test_with_predicted.csv")
null_model = glm(loan_status_Fully_Paid ~ 1, data=train_31, family="binomial")
null_model
#null_model = glm(loan_status_Fully_Paid ~ 1, data=train_31, family="binomial")
#null_model
#r.squaredLR(x, null = null.fit(x, TRUE, parent.frame()))
help(null.fit)
library(ResourceSelection)
library(MASS)
library(logistf)
library(dplyr)
library(MuMIn)
library(ResourceSelection)
library(MASS)
library(logistf)
library(dplyr)
library(MuMIn)
library(ResourceSelection)
library(MASS)
library(logistf)
library(dplyr)
install.packages("MuMIn")
library(MuMIn)
df = data.frame(read.csv("train.csv"))
head(df)
smp_size = floor(0.80 * nrow(df))
set.seed(123)
train_ind = sample(seq_len(nrow(df)),size = smp_size)
train = df[train_ind,]
selection = df[-train_ind,]
train_ind = sample(seq_len(nrow(train)),size = smp_size)
train = train[train_ind,]
validation = train[-train_ind,]
# Now I have three splits from train.csv = 20% validation and selection, 60% train
smp_size
smp_size = floor(0.20 * nrow(df))
set.seed(123)
train_ind = sample(seq_len(nrow(df)), size = smp_size)
train = df[-train_ind,]
selection = df[train_ind,]
train_ind = sample(seq_len(nrow(train)), size = smp_size)
train = train[-train_ind,]
validation = train[train_ind,]
# Now I have three splits from train.csv = 20% validation and selection, 60% train
nrow(train)
nrow(selection)
nrow(validation)
smp_size = floor(0.20 * nrow(df))
set.seed(123)
train_ind = sample(seq_len(nrow(df)), size = smp_size)
train = df[-train_ind,]
selection = df[train_ind,]
train_ind = sample(seq_len(nrow(train)), size = smp_size)
train = train[-train_ind,]
validation = train[train_ind,]
# Now I have three splits from train.csv = 20% validation and selection, 60% train
nrow(df)
nrow(train)
nrow(selection)
nrow(validation)
smp_size = floor(0.20 * nrow(df))
set.seed(123)
train_ind = sample(seq_len(nrow(df)), size = smp_size)
train = df[-train_ind,]
selection = df[train_ind,]
train_ind = sample(seq_len(nrow(train)), size = smp_size)
train = train[-train_ind,]
validation = train[train_ind,]
# Now I have three splits from train.csv = 20% validation and selection, 60% train
nrow(train)
nrow(selection)
nrow(validation)
mylogit <- glm(loan_status_Fully_Paid ~ ., data = selection, family = "binomial")
mylogit.step = stepAIC(mylogit, direction = "forward")
# select if z value is < .05
features_keep = summary(mylogit.step)$coefficients[,"Pr(>|z|)", drop=FALSE]
zfeatures = as.data.frame(features_keep)
zfeatures = subset(zfeatures, `Pr(>|z|)` < .05)
zfeatures
train_all = subset(train, select = c(rownames(zfeatures), 'loan_status_Fully_Paid'))
mylogit <- glm(loan_status_Fully_Paid ~ ., data = train_all, family = "binomial")
summary(mylogit)
train_all = subset(train, select = c(rownames(zfeatures), 'loan_status_Fully_Paid'))
mylogit <- glm(loan_status_Fully_Paid ~ ., data = train_all, family = "binomial")
summary(mylogit)
#null_model = glm(loan_status_Fully_Paid ~ 1, data=train_31, family="binomial")
#null_model
#r.squaredLR(x, null = null.fit(x, TRUE, parent.frame()))
help(r.squaredLR)
#null_model = glm(loan_status_Fully_Paid ~ 1, data=train_31, family="binomial")
#null_model
#r.squaredLR(mylogit, null = null.fit(mylogit, TRUE, parent.frame()))
help(null.fit)
#null_model = glm(loan_status_Fully_Paid ~ 1, data=train_31, family="binomial")
#null_model
r.squaredLR(mylogit, null = null.fit(mylogit, TRUE, parent.frame()))
# mod <- glm(y~x, family="binomial")
nullmod <- glm(loan_status_Fully_Paid ~ 1, data=train, family="binomial")
1-logLik(mylogit)/logLik(nullmod)
nullmod <- glm(loan_status_Fully_Paid ~ 1, data=train, family="binomial")
1-logLik(mylogit)/logLik(nullmod)
help(logLik)
nullmod <- glm(loan_status_Fully_Paid ~ 1, data=train, family="binomial")
1-logLik(mylogit)/logLik(nullmod)
help(Lik)
nullmod <- glm(loan_status_Fully_Paid ~ 1, data=train, family="binomial")
1-logLik(mylogit)/logLik(nullmod)
# validation set has not been seen during training, will use this set for final strategy selection
#predict_sample = predict.glm(mylogit, validation, type = "response")
#cor(validation$loan_status_Fully_Paid, predict_sample)^2
nullmod <- glm(loan_status_Fully_Paid ~ 1, data=validation, family="binomial")
1-logLik(mylogit)/logLik(nullmod)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
confusionMatrix(data=predict_sample, validation$loan_status_Fully_Paid)
library(ResourceSelection)
library(MASS)
library(logistf)
library(dplyr)
library(MuMIn)
library(caret)
library(ResourceSelection)
library(MASS)
library(logistf)
library(dplyr)
library(MuMIn)
install.packages(caret)
library(caret)
library(ResourceSelection)
library(MASS)
library(logistf)
library(dplyr)
library(MuMIn)
install.packages(caret)
library(caret)
library(ResourceSelection)
library(MASS)
library(logistf)
library(dplyr)
library(MuMIn)
install.packages("caret")
library(caret)
df = data.frame(read.csv("train.csv"))
head(df)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
confusionMatrix(data=predict_sample, validation$loan_status_Fully_Paid)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
nrow(validation$loan_status_Fully_Paid)
nrow(predict_sample)
#confusionMatrix(data=predict_sample, validation$loan_status_Fully_Paid)
#cor(validation$loan_status_Fully_Paid, predict_sample)^2
smp_size = floor(0.20 * nrow(df))
set.seed(123)
train_ind = sample(seq_len(nrow(df)), size = smp_size)
train = df[-train_ind,]
selection = df[train_ind,]
train_ind = sample(seq_len(nrow(train)), size = smp_size)
train = train[-train_ind,]
validation = train[train_ind,]
# Now I have three splits from train.csv = 20% validation and selection, 60% train
nrow(train)
nrow(selection)
nrow(validation)
# I disagree and think correlation is the best metric because Hosmer and Lemeshow goodness of fit (GOF) test not great with large data sets. Went with McFadden Psuedo R^2
nullmod <- glm(loan_status_Fully_Paid ~ 1, data=train, family="binomial")
1-logLik(mylogit)/logLik(nullmod)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
nrow(validation$loan_status_Fully_Paid)
nrow(predict_sample)
confusionMatrix(data=predict_sample, validation$loan_status_Fully_Paid)
smp_size = floor(0.20 * nrow(df))
set.seed(123)
train_ind = sample(seq_len(nrow(df)), size = smp_size)
train = df[-train_ind,]
selection = df[train_ind,]
train_ind = sample(seq_len(nrow(train)), size = smp_size)
train = train[-train_ind,]
validation = train[train_ind,]
# Now I have three splits from train.csv = 20% validation and selection, 60% train
nrow(train)
nrow(selection)
nrow(validation)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
print(validation$loan_status_Fully_Paid)
nrow(validation$loan_status_Fully_Paid)
nrow(predict_sample)
confusionMatrix(data=predict_sample, validation$loan_status_Fully_Paid)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
print(validation)
nrow(validation$loan_status_Fully_Paid)
nrow(predict_sample)
confusionMatrix(data=predict_sample, validation$loan_status_Fully_Paid)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
nrow(validation$loan_status_Fully_Paid)
nrow(predict_sample)
confusionMatrix(data=predict_sample, validation$loan_status_Fully_Paid)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
nrow(validation)
nrow(predict_sample)
confusionMatrix(data=predict_sample, validation$loan_status_Fully_Paid)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
nrow(validation$loan_status_Fully_Paid)
print(predict_sample)
confusionMatrix(data=predict_sample, validation$loan_status_Fully_Paid)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
confusionMatrix(data=predict_sample, validation$loan_status_Fully_Paid)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
validation2 = validation
validation2['predict'] = predict_sample
confusionMatrix(data=validation2['predict'], validation$loan_status_Fully_Paid)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
validation2 = validation
validation2['predict'] = predict_sample
write.csv(validation2, "validation2.csv")
confusionMatrix(data=validation2['predict'], validation$loan_status_Fully_Paid)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
validation2 = validation
validation2['predict'] = predict_sample
validation2[complete.cases(validation2), ]
write.csv(validation2, "validation2.csv")
confusionMatrix(data=validation2['predict'], validation$loan_status_Fully_Paid)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
validation2 = validation
validation2['predict'] = predict_sample
validation2[complete.cases(validation2$sub_grade_A1), ]
write.csv(validation2, "validation2.csv")
confusionMatrix(data=validation2['predict'], validation$loan_status_Fully_Paid)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
validation2 = validation
validation2['predict'] = predict_sample
validation2[complete.cases(validation2$sub_grade_A1), ]
write.csv(validation2, "validation2.csv")
confusionMatrix(data=validation2['predict'], validation$loan_status_Fully_Paid)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
validation2 = validation
validation2['predict'] = predict_sample
validation2 = validation2[complete.cases(validation2$sub_grade_A1), ]
write.csv(validation2, "validation2.csv")
confusionMatrix(data=validation2['predict'], validation$loan_status_Fully_Paid)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
validation['predict'] = predict_sample
validation = validation[complete.cases(validation$sub_grade_A1), ]
write.csv(validation, "validation.csv")
confusionMatrix(data=validation['predict'], validation$loan_status_Fully_Paid)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
validation['predict'] = predict_sample
validation = validation[complete.cases(validation$sub_grade_A1), ]
write.csv(validation, "validation.csv")
confusionMatrix(data=validation$predict, validation$loan_status_Fully_Paid)
# add predictions to test set
test = data.frame(read.csv("test.csv"))
test['predicted_values'] =  predict.glm(mylogit, test, type = "response")
head(test)
# validation set has not been seen during training, will use this set for final strategy selection
predict_sample = predict.glm(mylogit, validation, type = "response")
validation['predict'] = predict_sample
# clean out NAs from split
validation = validation[complete.cases(validation$sub_grade_A1), ]
write.csv(validation, "validation.csv")
# add predictions to test set
test = data.frame(read.csv("test.csv"))
test['predicted_values'] =  predict.glm(mylogit, test, type = "response")
head(test)
write.csv(summary(mylogit)$coefficients, "logit_coefs.csv")
write.csv(test, "test_with_predicted.csv")
library(tinytex)
